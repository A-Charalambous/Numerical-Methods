import numpy as np
import matplotlib.pyplot as plt
from scipy.interpolate import CubicSpline

# A cubic spline is defined piecewise, with each piece being a cubic polynomial.
# The spline and its first and second derivatives are continuous at the knots.
# Given a set of data points we find a cubic polynomial for each subinterval of the overall interval.
# These polynomials join together smoothly at the subinterval boundaries 


# Given data points
x = np.array([1, 2, 3, 4])
y = np.array([1, 3, 2, 4])

# Fit cubic spline with natural boundary conditions
cs = CubicSpline(x, y, bc_type='natural') # Natural spline: The second derivative at the endpoints is zero.

# Generate points to plot the spline
x_plot = np.linspace(1, 4, 100) # 100 equally spaced points between values 1 and 4.
y_plot = cs(x_plot)

# Plot the results
plt.scatter(x, y, color='red', label='Data points') # The given data points are shown in red colour.
plt.plot(x_plot, y_plot, label='Cubic Spline', color='blue') # Cubic splines shown in blue colour.
plt.title('Cubic Spline Interpolation')
plt.legend()
plt.show()


# Cubic interpolation provides a smoother curve compared to linear interpolation, which is beneficial when the underlying data is expected to be smooth.
# When higher accuracy is needed, cubic interpolation can provide better estimates by considering the curvature of the data.
# It is beneficial when dealing with larger datasets where the relationships between data points are more complex.
# For data that exhibits non-linear behavior between points, cubic interpolation can better capture the variations, compared to linear interpolation.
